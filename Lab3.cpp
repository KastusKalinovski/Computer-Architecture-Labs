#include <iostream>
#include <omp.h>
#include <cassert>
#include <chrono>
#include <Eigen/Dense>

using namespace std;
using namespace std::chrono;
using namespace Eigen;


const int n1 = 10, m1 = 9, n2 = 9, m2 = 36;

int** matMul(int** A, int** B) {
	//check shapes
	assert(m1 == n2);

	int** C;
	C = new int* [n1];
	for (int l = 0; l < n1; l++)
		C[l] = new int[m2];

	int threadsNum = 4;
	omp_set_num_threads(threadsNum);
	int i, j, k;

	#pragma omp parallel for shared(A, B, C) private(i, j, k)
	for (i = 0; i < n1; i++)
		for (j = 0; j < m2; j++) {
			C[i][j] = 0;
			for (k = 0; k < m1; k++)
				C[i][j] += A[i][k] * B[k][j];
		}

	return C; 
}
void printMat(int** A,int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;

}

int** init(int*values,int n, int m) {
	
	int** array;
	array = new int* [n];
	for (int i = 0; i < n; i++)
		array[i] = new int[m];

	int k = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			array[i][j] = values[k];
			k++;
		}
	}
	return array;
}


void test() {

	int** A;
	int** B;
	int** C;

	MatrixXd q(10,9);
	q << 1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6;
	MatrixXd p(9,36);
	p << 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0,
		1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1,
		5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0,
		1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1,
		5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0,
		1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1,
		5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0, 5, 2, 3, 0,
		1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1,
		1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1, 1, 4, 6, 1;


	int A_values[] = {
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		2, 4, 6, 2, 4, 6, 2, 4, 6,
	};

	int B_values[] = {
		 5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,
		 1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,
		 5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,
		 1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,
		 5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,
		 1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,
		 5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,5, 2, 3, 0,
		 1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,
		 1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,1, 4, 6, 1,
		 
	};

	A = init(A_values, n1, m1);
	B = init(B_values, n2, m2);

	printMat(A, n1, m1);
	printMat(B, n2, m2);
	auto startTime = high_resolution_clock::now();
	C = matMul(A, B);
	auto stopTime = high_resolution_clock::now();
	auto elapsed = duration_cast<nanoseconds>(stopTime - startTime);
	cout << "My result: " << endl;
	printMat(C, n1, m2);


	cout << "Eigen library result: " <<endl<< q*p  << endl;
	cout << "Nano Sec: " << elapsed.count()*1e-6 << endl;
}


int main()
{
	test();
	return 0;
}